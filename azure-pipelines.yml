# azure-pipelines.yml
trigger:
  branches:
    include:
      - main

variables:
  dockerRegistryServiceConnection: 'acr-docker-connection'
  acrLoginServer: 'shivacr.azurecr.io'
  imageRepository: 'spring-petclinic'
  dockerImageName: '$(acrLoginServer)/$(imageRepository):$(Build.BuildId)'
  kubernetesServiceConnection: 'aks-k8s-connection'  # <--- New Kubernetes type connection name
  aksNamespace: 'default'

pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: Build
    displayName: 'Build Spring Boot App'
    jobs:
      - job: Build
        steps:
          - task: Maven@3
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'clean package'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.11'

  # stage: CodeQuality
    #displayName: 'Analyze Code with SonarCloud'
   # condition: 
    #jobs:
     # - job: SonarQube
      #  steps:
       #   - task: SonarCloudPrepare@1
        #    inputs:
        #      SonarCloud: 'SonarCloud-Connection'  # Replace with your actual SonarCloud service connection
         #     organization: 'shivakarthikreddyk'
          #    scannerMode: 'CLI'
           #   configMode: 'manual'
            #  cliProjectKey: 'spring-petclinic'
             # cliProjectName: 'Spring PetClinic'

       #   - task: SonarCloudAnalyze@1

        #  - task: SonarCloudPublish@1
         #   inputs:
          #    pollingTimeoutSec: '300'

  - stage: Dockerize
    displayName: 'Docker Build and Push'
    jobs:
      - job: DockerBuildPush
        steps:
          - task: Docker@2
            inputs:
              containerRegistry: '$(dockerRegistryServiceConnection)'
              repository: '$(imageRepository)'
              command: 'buildAndPush'
              Dockerfile: '**/Dockerfile'
              tags: '$(Build.BuildId)'

  - stage: Deploy
    displayName: 'Deploy to AKS'
    jobs:
      - job: AKSDeploy
        steps:
          - task: KubernetesManifest@1
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: '$(kubernetesServiceConnection)'
              namespace: '$(aksNamespace)'
              manifests: |
                manifests/deployment.yaml
                manifests/service.yaml
              containers: |
                $(dockerImageName)

  - stage: Verify
    displayName: 'Expose and Verify'
    dependsOn: Deploy
    jobs:
      - job: OutputURL
        steps:
          - script: |
              echo "Fetching external IP..."
              kubectl get svc spring-petclinic-service -n $(aksNamespace) -o jsonpath='{.status.loadBalancer.ingress[0].ip}'
            displayName: 'Print External IP'